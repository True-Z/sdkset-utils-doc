import{_ as e,o as t,c as a,O as r}from"./chunks/framework.065d6068.js";const y=JSON.parse('{"title":"Interface: ArrayNativeMethod","description":"","frontmatter":{},"headers":[],"relativePath":"dist/interfaces/core_src_types.ArrayNativeMethod.md","filePath":"dist/interfaces/core_src_types.ArrayNativeMethod.md","lastUpdated":null}'),o={name:"dist/interfaces/core_src_types.ArrayNativeMethod.md"},d=r('<h1 id="interface-arraynativemethod" tabindex="-1">Interface: ArrayNativeMethod <a class="header-anchor" href="#interface-arraynativemethod" aria-label="Permalink to &quot;Interface: ArrayNativeMethod&quot;">​</a></h1><p><a href="./../modules/core_src_types.html">core/src/types</a>.ArrayNativeMethod</p><h2 id="hierarchy" tabindex="-1">Hierarchy <a class="header-anchor" href="#hierarchy" aria-label="Permalink to &quot;Hierarchy&quot;">​</a></h2><ul><li><p><strong><code>ArrayNativeMethod</code></strong></p><p>↳ <a href="./core_src_types.PickCore.html"><code>PickCore</code></a></p></li></ul><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="concat" tabindex="-1">concat <a class="header-anchor" href="#concat" aria-label="Permalink to &quot;concat&quot;">​</a></h3><p>• <strong>concat</strong>: (...<code>items</code>: <code>ConcatArray</code>&lt;<code>never</code>&gt;[]) =&gt; <code>never</code>[](...<code>items</code>: <code>ConcatArray</code>&lt;<code>never</code>&gt;[]) =&gt; <code>never</code>[]</p><h4 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>...items</code>): <code>never</code>[]</p><p>Combines two or more arrays. This method returns a new array without modifying any existing arrays.</p><h5 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...items</code></td><td style="text-align:left;"><code>ConcatArray</code>&lt;<code>never</code>&gt;[]</td><td style="text-align:left;">Additional arrays and/or items to add to the end of the array.</td></tr></tbody></table><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>never</code>[]</p><p>▸ (<code>...items</code>): <code>never</code>[]</p><p>Combines two or more arrays. This method returns a new array without modifying any existing arrays.</p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...items</code></td><td style="text-align:left;"><code>ConcatArray</code>&lt;<code>never</code>&gt;[]</td><td style="text-align:left;">Additional arrays and/or items to add to the end of the array.</td></tr></tbody></table><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>never</code>[]</p><hr><h3 id="join" tabindex="-1">join <a class="header-anchor" href="#join" aria-label="Permalink to &quot;join&quot;">​</a></h3><p>• <strong>join</strong>: (<code>separator?</code>: <code>string</code>) =&gt; <code>string</code></p><h4 id="type-declaration-1" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-1" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>separator?</code>): <code>string</code></p><p>Adds all the elements of an array into a string, separated by the specified separator string.</p><h5 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>separator?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.</td></tr></tbody></table><h5 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>string</code></p><hr><h3 id="pop" tabindex="-1">pop <a class="header-anchor" href="#pop" aria-label="Permalink to &quot;pop&quot;">​</a></h3><p>• <strong>pop</strong>: () =&gt; <code>undefined</code></p><h4 id="type-declaration-2" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-2" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (): <code>undefined</code></p><p>Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.</p><h5 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>undefined</code></p><hr><h3 id="push" tabindex="-1">push <a class="header-anchor" href="#push" aria-label="Permalink to &quot;push&quot;">​</a></h3><p>• <strong>push</strong>: (...<code>items</code>: <code>never</code>[]) =&gt; <code>number</code></p><h4 id="type-declaration-3" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-3" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>...items</code>): <code>number</code></p><p>Appends new elements to the end of an array, and returns the new length of the array.</p><h5 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...items</code></td><td style="text-align:left;"><code>never</code>[]</td><td style="text-align:left;">New elements to add to the array.</td></tr></tbody></table><h5 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>number</code></p><hr><h3 id="reverse" tabindex="-1">reverse <a class="header-anchor" href="#reverse" aria-label="Permalink to &quot;reverse&quot;">​</a></h3><p>• <strong>reverse</strong>: () =&gt; <code>never</code>[]</p><h4 id="type-declaration-4" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-4" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (): <code>never</code>[]</p><p>Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.</p><h5 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>never</code>[]</p><hr><h3 id="shift" tabindex="-1">shift <a class="header-anchor" href="#shift" aria-label="Permalink to &quot;shift&quot;">​</a></h3><p>• <strong>shift</strong>: () =&gt; <code>undefined</code></p><h4 id="type-declaration-5" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-5" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (): <code>undefined</code></p><p>Removes the first element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.</p><h5 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>undefined</code></p><hr><h3 id="slice" tabindex="-1">slice <a class="header-anchor" href="#slice" aria-label="Permalink to &quot;slice&quot;">​</a></h3><p>• <strong>slice</strong>: (<code>start?</code>: <code>number</code>, <code>end?</code>: <code>number</code>) =&gt; <code>never</code>[]</p><h4 id="type-declaration-6" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-6" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>start?</code>, <code>end?</code>): <code>never</code>[]</p><p>Returns a copy of a section of an array. For both start and end, a negative index can be used to indicate an offset from the end of the array. For example, -2 refers to the second to last element of the array.</p><h5 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>start?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The beginning index of the specified portion of the array. If start is undefined, then the slice begins at index 0.</td></tr><tr><td style="text-align:left;"><code>end?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The end index of the specified portion of the array. This is exclusive of the element at the index &#39;end&#39;. If end is undefined, then the slice extends to the end of the array.</td></tr></tbody></table><h5 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>never</code>[]</p><hr><h3 id="sort" tabindex="-1">sort <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;sort&quot;">​</a></h3><p>• <strong>sort</strong>: (<code>compareFn?</code>: (<code>a</code>: <code>never</code>, <code>b</code>: <code>never</code>) =&gt; <code>number</code>) =&gt; []</p><h4 id="type-declaration-7" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-7" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>compareFn?</code>): []</p><p>Sorts an array in place. This method mutates the array and returns a reference to the same array.</p><h5 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>compareFn?</code></td><td style="text-align:left;">(<code>a</code>: <code>never</code>, <code>b</code>: <code>never</code>) =&gt; <code>number</code></td><td style="text-align:left;">Function used to determine the order of the elements. It is expected to return a negative value if the first argument is less than the second argument, zero if they&#39;re equal, and a positive value otherwise. If omitted, the elements are sorted in ascending, ASCII character order. <code>ts [11,2,22,1].sort((a, b) =&gt; a - b) </code></td></tr></tbody></table><h5 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p>[]</p><hr><h3 id="splice" tabindex="-1">splice <a class="header-anchor" href="#splice" aria-label="Permalink to &quot;splice&quot;">​</a></h3><p>• <strong>splice</strong>: (<code>start</code>: <code>number</code>, <code>deleteCount?</code>: <code>number</code>) =&gt; <code>never</code>[](<code>start</code>: <code>number</code>, <code>deleteCount</code>: <code>number</code>, ...<code>items</code>: <code>never</code>[]) =&gt; <code>never</code>[]</p><h4 id="type-declaration-8" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-8" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>start</code>, <code>deleteCount?</code>): <code>never</code>[]</p><p>Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.</p><h5 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>start</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The zero-based location in the array from which to start removing elements.</td></tr><tr><td style="text-align:left;"><code>deleteCount?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The number of elements to remove.</td></tr></tbody></table><h5 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>never</code>[]</p><p>An array containing the elements that were deleted.</p><p>▸ (<code>start</code>, <code>deleteCount</code>, <code>...items</code>): <code>never</code>[]</p><p>Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.</p><h5 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>start</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The zero-based location in the array from which to start removing elements.</td></tr><tr><td style="text-align:left;"><code>deleteCount</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The number of elements to remove.</td></tr><tr><td style="text-align:left;"><code>...items</code></td><td style="text-align:left;"><code>never</code>[]</td><td style="text-align:left;">Elements to insert into the array in place of the deleted elements.</td></tr></tbody></table><h5 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>never</code>[]</p><p>An array containing the elements that were deleted.</p><hr><h3 id="unshift" tabindex="-1">unshift <a class="header-anchor" href="#unshift" aria-label="Permalink to &quot;unshift&quot;">​</a></h3><p>• <strong>unshift</strong>: (...<code>items</code>: <code>never</code>[]) =&gt; <code>number</code></p><h4 id="type-declaration-9" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-9" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>...items</code>): <code>number</code></p><p>Inserts new elements at the start of an array, and returns the new length of the array.</p><h5 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...items</code></td><td style="text-align:left;"><code>never</code>[]</td><td style="text-align:left;">Elements to insert at the start of the array.</td></tr></tbody></table><h5 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>number</code></p>',112),n=[d];function l(i,s,c,h,p,u){return t(),a("div",null,n)}const f=e(o,[["render",l]]);export{y as __pageData,f as default};
