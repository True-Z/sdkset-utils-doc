import{_ as s,o as a,c as n,O as e}from"./chunks/framework.065d6068.js";const C=JSON.parse('{"title":"Module: socket","description":"","frontmatter":{"prev":{"text":"Ajax（axios）","link":"dist/modules/axios"},"next":{"text":"本地缓存（local）","link":"dist/modules/storage_src_localStorage"}},"headers":[],"relativePath":"dist/modules/socket.md","filePath":"dist/modules/socket.md","lastUpdated":null}'),l={name:"dist/modules/socket.md"},o=e(`<h1 id="module-socket" tabindex="-1">Module: socket <a class="header-anchor" href="#module-socket" aria-label="Permalink to &quot;Module: socket&quot;">​</a></h1><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><ul><li><a href="./../interfaces/socket.SocketHandle.html">SocketHandle</a></li><li><a href="./../interfaces/socket.SocketQuery.html">SocketQuery</a></li></ul><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="usesocket" tabindex="-1">useSocket <a class="header-anchor" href="#usesocket" aria-label="Permalink to &quot;useSocket&quot;">​</a></h3><p>▸ <strong>useSocket</strong>(<code>config</code>, <code>handle?</code>): <code>Promise</code>&lt;<code>Socket</code>&gt;</p><p>以异步的方式返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">WebSocket</a>包装器对象。</p><p><strong><code>Example</code></strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> ws </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useSocket</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 请求 url</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ws://121.40.165.18:8800</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。心跳间隔数据，默认 &#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"> heartCheckData: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hi~~~</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。心跳间隔毫秒数，默认 55 * 1000</span></span>
<span class="line"><span style="color:#A6ACCD;"> heartCheckTimeout: </span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。最大重连次数，默认 3</span></span>
<span class="line"><span style="color:#A6ACCD;"> maxReconnectNum: </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。请求参数</span></span>
<span class="line"><span style="color:#A6ACCD;"> params: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。协议字符串 or 包含协议字符串的数组</span></span>
<span class="line"><span style="color:#A6ACCD;"> protocols: </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。当 WebSocket 的连接状态 readyState 变为 1 时调用；这意味着当前连接已经准备好发送和接受数据</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">open</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。当 websocket 的连接由于一些错误事件的发生 (例如无法发送一些数据) 而被关闭时，一个 error 事件将被引发</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">error</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。message 事件会在 WebSocket 接收到新消息时被触发</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。当 WebSocket 连接的 readyState 变为 CLOSED 时被调用；这意味着连接已被关闭</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。当 WebSocket 连接的 readyState 变为 CLOSED 且 code === 1006 时被调用；这意味着用于期望收到状态码时连接非正常关闭</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">recount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">ws</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 可选。当 WebSocket 重连失败时调用；这意味着需要特殊处理才能重新建立连接</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">fail</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hi~~~</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> send data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> close Socket</span></span></code></pre></div><p><strong><code>Method</code></strong></p><p><code>ws.send(data: string | Blob | ArrayBufferLike | ArrayBufferView): void</code></p><p>将需要通过 WebSocket 链接传输至服务器的数据排入队列，并根据所需要传输的 data bytes 的大小来增加 bufferedAmount的值。若数据无法传输（例如数据需要缓存而缓冲区已满）时，套接字会自行关闭。</p><p><code>ws.close(code?: number | undefined, reason?: string | undefined): void</code></p><p>关闭 WebSocket 连接或连接尝试（如果有的话）。如果连接已经关闭，则此方法不执行任何操作。</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>config</code></td><td style="text-align:left;"><a href="./../interfaces/socket.SocketQuery.html"><code>SocketQuery</code></a></td><td style="text-align:left;">请求配置对象</td></tr><tr><td style="text-align:left;"><code>handle?</code></td><td style="text-align:left;"><code>Partial</code>&lt;<a href="./../interfaces/socket.SocketHandle.html"><code>SocketHandle</code></a>&gt;</td><td style="text-align:left;">拦截器函数对象</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>Socket</code>&gt;</p>`,18),t=[o];function p(c,r,y,D,i,F){return a(),n("div",null,t)}const A=s(l,[["render",p]]);export{C as __pageData,A as default};
