import{_ as e,o as t,c as o,O as d}from"./chunks/framework.065d6068.js";const h=JSON.parse('{"title":"Type alias: IterateeResult<I, T>","description":"","frontmatter":{},"headers":[],"relativePath":"dist/types/types.IterateeResult.md","filePath":"dist/types/types.IterateeResult.md","lastUpdated":null}'),a={name:"dist/types/types.IterateeResult.md"},c=d('<h1 id="type-alias-iterateeresult-i-t" tabindex="-1">Type alias: IterateeResult&lt;I, T&gt; <a class="header-anchor" href="#type-alias-iterateeresult-i-t" aria-label="Permalink to &quot;Type alias: IterateeResult&lt;I, T\\&gt;&quot;">​</a></h1><p><a href="./../modules/types.html">types</a>.IterateeResult</p><p>Ƭ <strong>IterateeResult</strong>&lt;<code>I</code>, <code>T</code>&gt;: <code>I</code> extends (...<code>args</code>: <code>unknown</code>[]) =&gt; infer R ? <code>R</code> : <code>I</code> extends keyof <code>T</code> ? <code>T</code>[<code>I</code>] : <code>I</code> extends <code>string</code> | <code>number</code> | (<code>string</code> | <code>number</code>)[] ? <code>unknown</code> : <code>I</code> extends <code>object</code> ? <code>boolean</code> : <code>I</code> extends <code>null</code> | <code>undefined</code> ? <code>T</code> : <code>never</code></p><h4 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>I</code></td></tr><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table>',5),s=[c];function r(l,n,i,p,u,_){return t(),o("div",null,s)}const I=e(a,[["render",r]]);export{h as __pageData,I as default};
