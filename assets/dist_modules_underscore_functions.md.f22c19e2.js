import{_ as e,o as t,c as s,O as a}from"./chunks/framework.b766db97.js";const h=JSON.parse('{"title":"Module: underscore/functions","description":"","frontmatter":{},"headers":[],"relativePath":"dist/modules/underscore_functions.md","filePath":"dist/modules/underscore_functions.md"}'),o={name:"dist/modules/underscore_functions.md"},n=a(`<h1 id="module-underscore-functions" tabindex="-1">Module: underscore/functions <a class="header-anchor" href="#module-underscore-functions" aria-label="Permalink to &quot;Module: underscore/functions&quot;">​</a></h1><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of contents&quot;">​</a></h2><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><ul><li><a href="./underscore_functions.html#after">after</a></li><li><a href="./underscore_functions.html#before">before</a></li><li><a href="./underscore_functions.html#debounce">debounce</a></li><li><a href="./underscore_functions.html#delay">delay</a></li><li><a href="./underscore_functions.html#negate">negate</a></li><li><a href="./underscore_functions.html#once">once</a></li><li><a href="./underscore_functions.html#throttle">throttle</a></li></ul><h2 id="functions-1" tabindex="-1">Functions <a class="header-anchor" href="#functions-1" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="after" tabindex="-1">after <a class="header-anchor" href="#after" aria-label="Permalink to &quot;after&quot;">​</a></h3><p>▸ <strong>after</strong>(<code>n</code>, <code>func</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>Arr</code>) =&gt; <code>unknown</code></p><p><code>_.before</code>的反向函数；此方法创建一个函数，当他被调用<code>n</code>或更多次之后将马上触发<code>func</code>。</p><p><strong><code>Example</code></strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> saves </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">profile</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">settings</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">after</span><span style="color:#A6ACCD;">(saves</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">done saving!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(saves</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">type</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">asyncSave</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">complete</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">done</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; Logs &#39;done saving!&#39; after the two async saves have completed.</span></span></code></pre></div><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>n</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">调用次数</td></tr><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><code>Func</code></td><td style="text-align:left;">调用函数</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>unknown</code></p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>Arr</code></td></tr></tbody></table><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><hr><h3 id="before" tabindex="-1">before <a class="header-anchor" href="#before" aria-label="Permalink to &quot;before&quot;">​</a></h3><p>▸ <strong>before</strong>(<code>n</code>, <code>func</code>): (...<code>args</code>: <code>Arr</code>) =&gt; <code>unknown</code></p><p>创建一个调用<code>func</code>的函数，通过<code>this</code>绑定和创建函数的参数调用<code>func</code>，调用次数不超过<code>n</code>次。 之后再调用这个函数，将返回一次最后调用<code>func</code>的结果。</p><p><strong><code>Example</code></strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">jQuery</span><span style="color:#A6ACCD;">(element)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">before</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> addContactToList))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; allows adding up to 4 contacts to the list</span></span></code></pre></div><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>n</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">调用次数</td></tr><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><code>Func</code></td><td style="text-align:left;">调用函数</td></tr></tbody></table><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>...args</code>): <code>unknown</code></p><h5 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>Arr</code></td></tr></tbody></table><h5 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><hr><h3 id="debounce" tabindex="-1">debounce <a class="header-anchor" href="#debounce" aria-label="Permalink to &quot;debounce&quot;">​</a></h3><p>▸ <strong>debounce</strong>(<code>func</code>, <code>wait?</code>, <code>options?</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>Arr</code>) =&gt; <code>unknown</code></p><p>创建一个<code>debounced</code>（防抖动）函数，该函数会从上一次被调用后，延迟<code>wait</code>毫秒后调用<code>func</code>方法。 <code>func</code>调用时会传入最后一次提供给<code>debounced</code>函数的参数。 后续调用的<code>debounced</code>函数返回是最后一次<code>func</code>调用的结果。 如果<code>wait</code>为<code>0</code>并且<code>leading</code>为<code>false</code>,<code>func</code>调用将被推迟到下一个点，类似<code>setTimeout</code>为<code>0</code>的超时。 <code>debounced</code>函数提供一个<code>cancel</code>方法取消延迟；<code>flush</code>方法立即调用；<code>pending</code>方法判断是否有正在执行的防抖动函数。</p><p><strong><code>Example</code></strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 避免窗口在变动时出现昂贵的计算开销。</span></span>
<span class="line"><span style="color:#82AAFF;">jQuery</span><span style="color:#A6ACCD;">(window)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">resize</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debounce</span><span style="color:#A6ACCD;">(calculateLayout</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">150</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当点击时 \`sendMail\` 随后就被调用。</span></span>
<span class="line"><span style="color:#82AAFF;">jQuery</span><span style="color:#A6ACCD;">(element)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debounce</span><span style="color:#A6ACCD;">(sendMail</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">300</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">leading</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">trailing</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 确保 \`batchLog\` 调用1次之后，1秒内会被触发。</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> debounced </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debounce</span><span style="color:#A6ACCD;">(batchLog</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">250</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">maxWait</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> source </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EventSource</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/stream</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">jQuery</span><span style="color:#A6ACCD;">(source)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> debounced)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 取消一个 trailing 的防抖动调用</span></span>
<span class="line"><span style="color:#82AAFF;">jQuery</span><span style="color:#A6ACCD;">(window)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">popstate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> debounced</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cancel)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><code>Func</code></td><td style="text-align:left;">要防抖动的函数</td></tr><tr><td style="text-align:left;"><code>wait?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">需要延迟的毫秒数</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><code>DebounceOption</code></td><td style="text-align:left;">选项对象</td></tr></tbody></table><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>unknown</code></p><h5 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>Arr</code></td></tr></tbody></table><h5 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cancel</code></td><td style="text-align:left;">() =&gt; <code>void</code></td></tr><tr><td style="text-align:left;"><code>flush</code></td><td style="text-align:left;">() =&gt; <code>unknown</code></td></tr><tr><td style="text-align:left;"><code>pending</code></td><td style="text-align:left;">() =&gt; <code>boolean</code></td></tr></tbody></table><hr><h3 id="delay" tabindex="-1">delay <a class="header-anchor" href="#delay" aria-label="Permalink to &quot;delay&quot;">​</a></h3><p>▸ <strong>delay</strong>(<code>func</code>, <code>wait</code>, <code>...args</code>): <code>Timeout</code></p><p>类似<code>setTimeout</code>，等待<code>wait</code>毫秒后调用<code>func</code>。如果传递可选的参数<code>args</code>，当函数<code>func</code>执行时，<code>args</code>会作为参数传入。</p><p><strong><code>Example</code></strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> log </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(console</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> console)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">delay</span><span style="color:#A6ACCD;">(log</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">logged later</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">logged later</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Appears after one second.</span></span></code></pre></div><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><code>Func</code></td><td style="text-align:left;">要执行的函数</td></tr><tr><td style="text-align:left;"><code>wait</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">等待毫秒数</td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>Arr</code></td><td style="text-align:left;">附加参数</td></tr></tbody></table><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Timeout</code></p><hr><h3 id="negate" tabindex="-1">negate <a class="header-anchor" href="#negate" aria-label="Permalink to &quot;negate&quot;">​</a></h3><p>▸ <strong>negate</strong>(<code>predicate</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>Arr</code>) =&gt; <code>boolean</code></p><p>返回一个<code>predicate</code>函数的否定版本函数。</p><p><strong><code>Example</code></strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> isFalsy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">negate</span><span style="color:#A6ACCD;">(Boolean)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> isFalsy)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span></code></pre></div><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>predicate</code></td><td style="text-align:left;"><code>Func</code></td><td style="text-align:left;">指定函数</td></tr></tbody></table><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>boolean</code></p><h5 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>Arr</code></td></tr></tbody></table><h5 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>boolean</code></p><hr><h3 id="once" tabindex="-1">once <a class="header-anchor" href="#once" aria-label="Permalink to &quot;once&quot;">​</a></h3><p>▸ <strong>once</strong>(<code>func</code>): (...<code>args</code>: <code>Arr</code>) =&gt; <code>unknown</code></p><p>创建一个只能调用<code>func</code>一次的函数。 重复调用返回第一次调用的结果。<code>func</code>调用时，<code>this</code>绑定到创建的函数，并传入对应参数。</p><p><strong><code>Example</code></strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> initialize </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">once</span><span style="color:#A6ACCD;">(createApplication)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">initialize</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">initialize</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// \`initialize\` 只能调用 \`createApplication\` 一次。</span></span></code></pre></div><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><code>Func</code></td><td style="text-align:left;">指定函数</td></tr></tbody></table><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>...args</code>): <code>unknown</code></p><h5 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>Arr</code></td></tr></tbody></table><h5 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><hr><h3 id="throttle" tabindex="-1">throttle <a class="header-anchor" href="#throttle" aria-label="Permalink to &quot;throttle&quot;">​</a></h3><p>▸ <strong>throttle</strong>(<code>func</code>, <code>wait</code>, <code>options?</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>Arr</code>) =&gt; <code>unknown</code></p><p>创建一个<code>throttle</code>（节流）函数，在<code>wait</code>秒内最多执行<code>func</code>一次的函数。 <code>func</code>调用时会传入最后一次提供给<code>throttle</code>函数的参数。 后续调用的<code>throttle</code>函数返回是最后一次<code>func</code>调用的结果。 如果<code>wait</code>为<code>0</code>并且<code>leading</code>为<code>false</code>,<code>func</code>调用将被推迟到下一个点，类似<code>setTimeout</code>为<code>0</code>的超时。 <code>debounced</code>函数提供一个<code>cancel</code>方法取消延迟；<code>flush</code>方法立即调用；<code>pending</code>方法判断是否有正在执行的节流函数。</p><p><strong><code>Example</code></strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 避免在滚动时过分的更新定位</span></span>
<span class="line"><span style="color:#82AAFF;">jQuery</span><span style="color:#A6ACCD;">(window)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">scroll</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">throttle</span><span style="color:#A6ACCD;">(updatePosition</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 点击后就调用 \`renewToken\`，但5分钟内超过1次。</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> throttled </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">throttle</span><span style="color:#A6ACCD;">(renewToken</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">300000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">trailing</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">jQuery</span><span style="color:#A6ACCD;">(element)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> throttled)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 取消一个 trailing 的节流调用。</span></span>
<span class="line"><span style="color:#82AAFF;">jQuery</span><span style="color:#A6ACCD;">(window)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">popstate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> throttled</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cancel)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><code>Func</code></td><td style="text-align:left;">要节流的函数</td></tr><tr><td style="text-align:left;"><code>wait</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">需要节流的毫秒数</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><code>Omit</code>&lt;<code>DebounceOption</code>, <code>&quot;maxWait&quot;</code>&gt;</td><td style="text-align:left;">选项对象</td></tr></tbody></table><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>unknown</code></p><h5 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>Arr</code></td></tr></tbody></table><h5 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cancel</code></td><td style="text-align:left;">() =&gt; <code>void</code></td></tr><tr><td style="text-align:left;"><code>flush</code></td><td style="text-align:left;">() =&gt; <code>unknown</code></td></tr><tr><td style="text-align:left;"><code>pending</code></td><td style="text-align:left;">() =&gt; <code>boolean</code></td></tr></tbody></table>`,106),l=[n];function c(r,p,d,y,i,D){return t(),s("div",null,l)}const A=e(o,[["render",c]]);export{h as __pageData,A as default};
